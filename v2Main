#include <avr/sleep.h>
#include <avr/interrupt.h>
#include "Inventory.h"
#include "connection.h"

// Pins 
const byte BUTTON = 2;
const byte SOUND = 7;
const byte rRGB = 9;
const byte gRGB = 10;
const byte bRGB = 11;

// Pre-set colors
const byte RED[3] = {255, 0, 0};
const byte GREEN[3] = {0, 255, 0};
const byte BLUE[3] = {0, 0, 255};
const byte YELLOW[3] = {255, 255, 0};
const byte OFF[3] = {0, 0, 0};

// Pre-set tones
const int c = 262;
const int db = 277;
const int d = 294;
const int eb = 311;
const int e = 330;
const int f = 349;
const int gb = 370;
const int g = 392;
const int ab = 415;
const int a = 440;
const int b = 466;
const int h = 494;
const int b4 = 500;
const int c5 = 592;

const int noteDur = 200;


// Timer
unsigned long previousMillis = 0;
unsigned long inactivityTimer = 0;
const unsigned long idleTimeout = 5000;

// Debounce
volatile bool buttonPressed = false;
unsigned long lastDebounceTime = 0;
const byte debounceDelay = 50;

// Possible program modes
enum Mode {
  START_UP, 
  SCAN_IN_MODE,
  REMOVE_MODE,
  IDLE
};

// modes used defined
Mode currentMode = START_UP; // initial mode

Inventory inventory;

void setup() {
  Serial.begin(9600);
  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(rRGB, OUTPUT);
  pinMode(gRGB, OUTPUT);
  pinMode(bRGB, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(BUTTON), wakeUp, FALLING);

  inactivityTimer = millis();
}


void loop() {
  unsigned long currentMillis = millis();
  
  if(currentMillis - inactivityTimer >= idleTimeout) {
    currentMode = IDLE;
  }
  
  if(buttonPressed) {
    if((millis() - lastDebounceTime) > debounceDelay) {
      buttonPressed = false;
      if(IDLE == currentMode) {
        wakeUp();
      } else {
        toggleMode();
      }
    }
  }

  switch (currentMode) {
    case START_UP:
      startSoundLED();
      currentMode = SCAN_IN_MODE;
    break;

    case SCAN_IN_MODE:


     break;

    case REMOVE_MODE:


     break;
    
    case IDLE:
     idleSoundLED();
     sleepMode();
     break;
  }
  
}

// Interrupt service routine to handle button press
void handleButtonPress() {
  lastDebounceTime = millis();
  buttonPressed = true;
}

// Toggle between SCAN_IN_MODE and REMOVE_MODE
void toggleMode() {
  if(SCAN_IN_MODE == currentMode) {
    currentMode = REMOVE_MODE;
    setRemoveLED();
  } else if(REMOVE_MODE == currentMode) {
    currentMode = SCAN_IN_MODE;
    setScanInLED();
  }
  toggleModeSound();
  resetInactivityTime();
}

// Interrupt service routine to wake up from idle mode
void wakeUp() {
  currentMode = START_UP;
  resetInactivityTime();
  detachInterrupt(digitalPinToInterrupt(BUTTON));   // Detach interrupt to avoid ISR being called repeatedly
}

// Sleep mode config
void sleepMode() {
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);                                  // Enter sleep mode to save power
  sleep_enable();                                                       // Enable sleep mode
  
  attachInterrupt(digitalPinToInterrupt(BUTTON), handleButtonPress, FALLING);      // Attach interrupt to button pin in order to wake up on button press
  
  sleep_mode();                                                         // Enter sleep mode, program stops until interrupt is called
  
  sleep_disable();                                                      // Disable sleep mode to stop arduino from going back to sleep immediately
  detachInterrupt(digitalPinToInterrupt(BUTTON));                       // Detach interrupt from button pin
}

// Reset inactivity timer whenever an action is performed
void resetInactivityTime() {
 inactivityTimer = millis();
}

// Set RGB LED color
void setColor(const byte color[3]) {
  analogWrite(rRGB, color[0]);
  analogWrite(gRGB, color[1]);
  analogWrite(bRGB, color[2]);
}

// Indicate connected to wifi
void setConnectedLED() {
  setColor(BLUE);
  delay(1500);
  setColor(OFF);
}

// Indicate not connected wifi
void setNotConnectedLED() {
  setColor(YELLOW);
  delay(1500);
  setColor(OFF);
}

// Indicate scan in mode
void setScanInLED() {
 setColor(GREEN);
}

// Indicate remove mode
void setRemoveLED() {
 setColor(OFF);
 delay(750);
 setScanInLED();
}

// Play melody when toggling mode
void toggleModeSound() {
  tone(SOUND, c5, noteDur);
  delay(noteDur);
  tone(SOUND, b4, noteDur);
  delay(noteDur);
  noTone(SOUND);
}

// Play melody and set LED to red when going idle
void idleSoundLED() {
  setColor(RED);
  tone(SOUND, f, noteDur);
  delay(noteDur);
  tone(SOUND, c, noteDur);
  delay(noteDur);
  noTone(SOUND);
}

// Play melody and LED sequence when starting up scanner
void startSoundLED(){
  setColor(RED);
  tone(SOUND, c, noteDur);
  delay(noteDur);
  setColor(GREEN);
  tone(SOUND, e, noteDur);
  delay(noteDur);
  setColor(BLUE);
  tone(SOUND, g, noteDur);
  delay(noteDur);
  setColor(YELLOW);
  tone(SOUND, c5, noteDur);
  delay(noteDur);
  noTone(SOUND);
}
